name: build
on:
  push:
    branches:
    - master
    paths-ignore:
    - 'docker/**'
    - 'docs/**'
    - 'notebooks/**'
  pull_request:
    branches:
    - master
    paths-ignore:
    - 'docker/**'
    - 'docs/**'
    - 'notebooks/**'

jobs:
  universal:
    name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        node_version: ['12', '14']
        os: [ubuntu-latest, macOS-latest]
    steps:
    - name: cancel previous runs
      uses: imgcook/cancel-workflow-action@81524cf
      with:
        access_token: ${{ github.token }}
        exception: master
    - uses: actions/checkout@v2
    - name: restore lerna
      uses: actions/cache@v2
      with:
        path: |
          node_modules
          */*/node_modules
          packages/boa/pybind11
          packages/boa/pyodide
        key: ${{ runner.os }}-${{ matrix.node_version }}-${{ hashFiles('**/package-lock.json,packages/boa/pybind11/Makefile,packages/boa/pyodide/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node_version }}
          ${{ runner.os }}
    - name: restore miniconda
      uses: actions/cache@v2
      with:
        path: |
          packages/boa/.miniconda
          packages/boa/Miniconda3-latest*.sh
          packages/boa/.CONDA_INSTALL_DIR
        key: ${{ runner.os }}-miniconda-${{ hashFiles('packages/boa/Miniconda3-latest*.sh') }}
        restore-keys: |
          ${{ runner.os }}-miniconda
    - name: Using Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}
    - name: Building Pipcook
      run: |
        npm install
        npm run build
        npm run init-dev
        du -h -d 1
    - name: Running unit tests
      run: |
        npm test
    - name: migration
      if: ${{ runner.os == 'Linux' }}
      run: |
        mkdir -p ~/.pipcook/db && cp ./packages/daemon/test/res/baseline-v1.db ~/.pipcook/db/pipcook.db
    - name: daemon start
      run: |
        ./packages/cli/dist/bin/pipcook daemon start
    - name: Testing help commands
      run: |
        ./packages/cli/dist/bin/pipcook -v
        ./packages/cli/dist/bin/pipcook -h
        ./packages/cli/dist/bin/pipcook init --help
        ./packages/cli/dist/bin/pipcook run --help
        ./packages/cli/dist/bin/pipcook plugin-dev --help
        ./packages/cli/dist/bin/pipcook serve --help
    - name: pipcook sdk test
      run: |
        npx ts-node ./run_tests.ts
    - name: install plugins from specific pipeline
      run: |
        ./packages/cli/dist/bin/pipcook pipeline install ./example/pipelines/chinese-poem-creation.json
        ./packages/cli/dist/bin/pipcook pipeline install https://raw.githubusercontent.com/alibaba/pipcook/master/example/pipelines/text-bayes-classification.json
    - name: Running an example pipeline
      run: |
        npm run test:pipeline -- text-bayes-classification
    - name: install a new plugin and install a installed plugin
      run: |
        ./packages/cli/dist/bin/pipcook plugin install @pipcook/plugins-chinese-poem-data-collect
        ./packages/cli/dist/bin/pipcook plugin install @pipcook/plugins-chinese-poem-data-collect
    - name: pipcook run from local filename
      run: |
        ./packages/cli/dist/bin/pipcook run ./example/pipelines/text-bayes-classification.json
        ls ./output && rm -rf ./output
        ./packages/cli/dist/bin/pipcook run ./example/pipelines/text-bayes-classification.json --output mydir
        ls ./mydir && rm -rf ./mydir
    - name: pipcook run from url
      run: |
        ./packages/cli/dist/bin/pipcook run https://raw.githubusercontent.com/alibaba/pipcook/master/example/pipelines/text-bayes-classification.json
        ls ./output && rm -rf ./output
    - name: "pipcook plugin-dev"
      run: |
        ./packages/cli/dist/bin/pipcook plugin-dev -t dataCollect
