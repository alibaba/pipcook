name: Publish Packages
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install Dependencies
        run: |
          npm install
          npm run build

      - name: Get release version
        id: get_version
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:11})

      - name: Publish check
        run: |
          ver=$RELEASE_VERSION
          check_pkg() {
            curl -sL "http://registry.npmjs.com/@pipcook/$1" | jq -r '.versions."'$2'".version'
          }

          check_image() {
            curl -sL "https://hub.docker.com/v2/repositories/pipcook/pipcook/tags/$1" | jq -r '.name'
          }

          if
            [ $(check_pkg pipcook-cli $ver) == $ver ] &&
            [ $(check_pkg daemon $ver) == $ver ]
          then
            echo ::set-env name=NPM_PUBLISHED::true
          fi

          if [ $(check_image $ver) == $ver ]; then
            echo ::set-env name=DOCKER_PUBLISHED::true
          fi

      - name: Publish npm packages
        if: env.NPM_PUBLISHED != 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.npm_token }}" > ~/.npmrc
          git config --global user.name 'pipcook'
          git config --global user.email 'queyue.crk@alibaba-inc.com'
          git add .
          git commit -m "bump version" --allow-empty
          npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
          NPM_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Publish to Docker registry
        uses: docker/build-push-action@v1
        if: env.DOCKER_PUBLISHED != 'true'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: pipcook/pipcook
          dockerfile: docker/Dockerfile
          build_args: VER=${{ env.RELEASE_VERSION }}
          tags: "latest,${{ env.RELEASE_VERSION }}"


      - name: Sync from dockerhub to Aliyun
        env:
          ALI_DOCKER_USERNAME: ${{ secrets.ALI_DOCKER_USERNAME }}
          ALI_DOCKER_PASSWORD: ${{secrets.ALI_DOCKER_PASSWORD}}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          wget https://github.com/AliyunContainerService/image-syncer/releases/download/v1.2.0/image-syncer-v1.2.0-linux-amd64.tar.gz
          tar -zxvf image-syncer-v1.2.0-linux-amd64.tar.gz

          echo {\"registry.cn-hangzhou.aliyuncs.com\": {\"username\": \"$ALI_DOCKER_USERNAME\", \"password\": \"$ALI_DOCKER_PASSWORD\"} \
          , \"registry.hub.docker.com\": {\"username\":\"$DOCKER_USERNAME\", \"password\":\"$DOCKER_PASSWORD\"}} >> auth.json

          echo {\"pipcook/pipcook:latest\": \"registry.cn-hangzhou.aliyuncs.com/pipcook/pipcook:latest\", \
          \"pipcook/pipcook:$RELEASE_VERSION\": \"registry.cn-hangzhou.aliyuncs.com/pipcook/pipcook:$RELEASE_VERSION\"} >> images.json

          ./image-syncer --auth=./auth.json --images=./images.json --namespace=pipcook --registry=registry.cn-hangzhou.aliyuncs.com --retries=3
